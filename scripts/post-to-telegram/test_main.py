#!/usr/bin/env python3
#
# Copyright (C) 2022 SRE France
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import json
import unittest

from main import format_message


class TestFormatMessage(unittest.TestCase):
    def test_basic(self):
        """A basic test for the Happy Path."""
        with open("test_data/01-payload.json", "r") as f:
            payload = json.load(f)
        with open("test_data/01-expected.txt", "r") as f:
            expected = f.read().strip()
        msg = format_message(payload)
        self.assertEqual(msg, expected)

    def test_non_supported_html_tags(self):
        """
        Telegram Bot API only supports a limited subset of HTML tags and attributes
        so this test verify that for example '<p></p>' are stripped.
        """
        with open("test_data/02-payload-non-supported-html.json", "r") as f:
            payload = json.load(f)
        with open("test_data/02-expected-non-supported-html.txt", "r") as f:
            expected = f.read().strip()
        msg = format_message(payload)
        self.assertEqual(msg, expected)

    def test_html_entities_convertion(self):
        """
        JSON output generated by Hugo contains HTML entities like '&bnsp;' even on
        the plain text field that need to converted to its equivalent UTF char.
        """
        with open("test_data/03-payload-html-entities.json", "r") as f:
            payload = json.load(f)
        with open("test_data/03-expected-html-entities.txt", "r") as f:
            expected = f.read().strip()
        msg = format_message(payload)
        self.assertEqual(msg, expected)


if __name__ == "__main__":
    unittest.main()
